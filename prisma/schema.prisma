// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

// =======================  Customar User =======================
model Users {
   id           Int             @id @default(autoincrement())
   firstName    String
   lastName     String
   email        String          @unique
   phoneNumber  String?
   profileImage String?
   userAuth     UserAuth?
   role         UserRole        @default(user)
   isActive     Boolean         @default(true)
   order        Order[]
   tableBooking TableBooking[]
   userAddress  UserAddresses[]
   createdAt    DateTime        @default(now())
   updatedAt    DateTime        @default(now()) @updatedAt
}

model UserAuth {
   id       Int     @id @default(autoincrement())
   userId   Int     @unique
   user     Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   method   String?
   password String?
}

enum UserRole {
   user
   administrator
   admin
   manager
   customerSupport
   technicalSupport
   salesAgent
   deliveryBoy
}

model UserAddresses {
   id              Int      @id @default(autoincrement())
   userId          Int
   user            Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   deliveryPurpose Boolean  @default(false)
   billingPurpose  Boolean  @default(false)
   defaultDelivery Boolean  @default(false)
   defaultBilling  Boolean  @default(false)
   fullName        String
   phone           String
   streetAddress   String
   city            String
   state           String
   zipCode         String
   country         String
   createdAt       DateTime @default(now())
   updatedAt       DateTime @default(now()) @updatedAt
}

// ======================= Category================

model Taxonomy {
   id          Int              @id @default(autoincrement())
   name        String
   slug        String           @unique
   description String?
   thumbnail   String?
   type        TaxonomyType     @default(category)
   parentId    Int?
   parent      Taxonomy?        @relation("parentRelation", fields: [parentId], references: [id])
   predecessor Taxonomy[]       @relation("parentRelation")
   dishes      DishesTaxonomy[]
   createdAt   DateTime         @default(now())
   updatedAt   DateTime         @default(now()) @updatedAt
}

enum TaxonomyType {
   category
   tag
}

model Dishes {
   id               Int              @id @default(autoincrement())
   title            String
   slug             String           @unique
   description      String?
   shortDescription String
   price            Int
   costPrice        Int?
   thumbnail        String?
   nonVeg           Boolean          @default(false)
   categories       DishesTaxonomy[]
   checkout         Checkout[]
   orderItems       OrderItems[]
   createdAt        DateTime         @default(now())
   updatedAt        DateTime         @default(now()) @updatedAt
}

model DishesTaxonomy {
   id         Int      @id @default(autoincrement())
   dishId     Int
   dish       Dishes   @relation(fields: [dishId], references: [id])
   taxonomyId Int
   taxonomy   Taxonomy @relation(fields: [taxonomyId], references: [id])

   @@unique([dishId, taxonomyId])
}

// =================== checkout ===================

model Checkout {
   id         Int      @id @default(autoincrement())
   checkoutId String
   dishId     Int
   dishes     Dishes   @relation(fields: [dishId], references: [id])
   quantity   Int
   price      Int
   createdAt  DateTime @default(now())
   updatedAt  DateTime @default(now()) @updatedAt

   @@unique([checkoutId, dishId])
}

// ================== Orders =================

model Order {
   id            Int             @id @default(autoincrement())
   cuid          String          @unique @default(cuid())
   userId        Int
   user          Users           @relation(fields: [userId], references: [id])
   totalAmount   Int?
   status        OrderStatus     @default(pending)
   paymentMethod PaymentDetails?
   orderItems    OrderItems[]
   createdAt     DateTime        @default(now())
   updatedAt     DateTime        @default(now()) @updatedAt
}

model OrderItems {
   id        Int      @id @default(autoincrement())
   orderId   Int
   order     Order    @relation(fields: [orderId], references: [id])
   dishId    Int
   dishes    Dishes   @relation(fields: [dishId], references: [id])
   quantity  Int
   price     Int
   createdAt DateTime @default(now())
   updatedAt DateTime @default(now()) @updatedAt
}

model PaymentDetails {
   id            Int           @id @default(autoincrement())
   orderId       Int           @unique
   order         Order         @relation(fields: [orderId], references: [id])
   paymentId     String
   paymentMethod String
   amount        Int
   status        PaymentStatus @default(pending)
   transactionId String?
   createdAt     DateTime      @default(now())
   updatedAt     DateTime      @default(now()) @updatedAt
}

enum OrderStatus {
   pending
   confirmed
   rejected
   placed
   delivered
   cancelled
}

enum PaymentStatus {
   pending
   succeeded
   failed
   refunded
}

// ===================== Table Booking =================

model TableBooking {
   id        Int           @id @default(autoincrement())
   cuid      String        @unique @default(cuid())
   userId    Int
   user      Users         @relation(fields: [userId], references: [id])
   tableId   Int
   table     Table         @relation(fields: [tableId], references: [id])
   time      String
   date      String
   note      String?
   status    BookingStatus @default(pending)
   createdAt DateTime      @default(now())
   updatedAt DateTime      @default(now()) @updatedAt

   @@unique([id, userId])
}

model Table {
   id           Int            @id @default(autoincrement())
   tableNumber  Int
   capacity     Int
   TableBooking TableBooking[]
   createdAt    DateTime       @default(now())
   updatedAt    DateTime       @default(now()) @updatedAt
}

enum BookingStatus {
   pending
   confirmed
   rejected
}
